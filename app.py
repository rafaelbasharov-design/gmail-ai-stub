# app.py
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
import os
import openai
import logging

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("gmail-ai-stub")

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS: —É–∫–∞–∑—ã–≤–∞–µ–º origins, –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å '*' –¥–ª—è —Ç–µ—Å—Ç–∞, –Ω–æ –ª—É—á—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω.
CORS(app, origins=["https://mail.google.com", "chrome-extension://*"], supports_credentials=True)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    log.error("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ environment variables!")
openai.api_key = OPENAI_API_KEY

@app.route("/", methods=["GET"])
def home():
    return jsonify({"message": "AI Gmail server active üöÄ", "status": "ok"})

@app.route("/generate", methods=["POST", "OPTIONS"])
def generate():
    # OPTIONS –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω flask_cors, –Ω–æ –¥–µ—Ä–∂–∏–º –Ω–∞ –≤—Å—è–∫–∏–π
    if request.method == "OPTIONS":
        resp = make_response()
        resp.status_code = 204
        return resp

    try:
        data = request.get_json(force=True, silent=True) or {}
        text = (data.get("text") or "").strip()
        if not text:
            return jsonify({"error": "Empty text"}), 400

        # –ü—Ä–∏–º–µ—Ä —Å ChatCompletion (gpt-3.5-turbo) ‚Äî —Å—Ç–∞—Ä—ã–π/—à–∏—Ä–æ–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ø–∏—Å—å–º–∞."},
                {"role": "user", "content": text}
            ],
            temperature=0.7,
            max_tokens=300
        )

        # –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        reply = ""
        try:
            reply = resp["choices"][0]["message"]["content"].strip()
        except Exception:
            reply = resp.get("choices", [{}])[0].get("text", "").strip()

        if not reply:
            return jsonify({"error": "Empty reply from OpenAI"}), 502

        return jsonify({"reply": reply})

    except openai.error.RateLimitError as e:
        log.exception("OpenAI RateLimit")
        return jsonify({"error": "Rate limit / quota exceeded"}), 429
    except openai.error.OpenAIError as e:
        log.exception("OpenAI error")
        return jsonify({"error": "OpenAI error: " + str(e)}), 502
    except Exception as e:
        log.exception("Server error")
        return jsonify({"error": "Server error: " + str(e)}), 500

if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)), debug=False)
