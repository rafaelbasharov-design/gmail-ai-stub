from flask import Flask, request, jsonify
import os
from openai import OpenAI

app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á API –∏–∑ Render
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@app.route("/")
def home():
    return jsonify({"status": "Gmail AI Stub is running"})

@app.route("/generate", methods=["POST"])
def generate_reply():
    try:
        data = request.get_json()
        text = data.get("text", "").strip()
        language = data.get("language", "ru")
        tone = data.get("tone", "polite")

        if not text:
            return jsonify({"error": "No text provided"}), 400

        # üß† –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏
        tone_prompts = {
            "polite": "–û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.",
            "short": "–°–æ—Å—Ç–∞–≤—å –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –Ω–µ –±–æ–ª–µ–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
            "business": "–°–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ, –∫–∞–∫ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ.",
            "creative": "–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º, —Å –ª—ë–≥–∫–∏–º –∫—Ä–µ–∞—Ç–∏–≤–æ–º.",
            "thanks": "–°–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω."
        }

        tone_instruction = tone_prompts.get(tone, tone_prompts["polite"])

        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–∏—Å—å–º–æ –Ω–∞ {language} —è–∑—ã–∫–µ. "
            f"{tone_instruction} –û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –Ω–∞ {language} —è–∑—ã–∫–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏.\n\n"
            f"–ü–∏—Å—å–º–æ:\n{text}"
        )

        # ‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî AI –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–∏—Å—å–º–∞ Gmail."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=400
        )

        ai_reply = completion.choices[0].message.content.strip()
        return jsonify({"reply": ai_reply})

    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", e)
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
