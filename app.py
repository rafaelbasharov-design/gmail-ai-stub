from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import os, threading, time, requests

app = Flask(__name__)
CORS(app)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –∫–ª—é—á–æ–º –∏–∑ Render
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@app.route("/")
def home():
    return jsonify({"status": "ok", "message": "AI Gmail server active üöÄ"})

@app.route("/generate", methods=["POST"])
def generate():
    try:
        data = request.get_json()
        user_text = data.get("text", "").strip()
        if not user_text:
            return jsonify({"error": "No text provided"}), 400

        # –®–∞–≥ 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
        detect_prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ```{user_text}```. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–¥–æ–º —è–∑—ã–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: en, ru, es, fr, de, it."
        detect_response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": detect_prompt}],
        )
        lang = detect_response.choices[0].message.content.strip().lower()
        if len(lang) > 3 or not lang.isalpha():
            lang = "en"  # fallback

        # –®–∞–≥ 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ
        generate_prompt = (
            f"–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –∫—Ä–∞—Ç–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø–∏—Å—å–º–µ "
            f"–Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ ({lang}), –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ:\n\n{user_text}"
        )
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": generate_prompt}],
        )

        reply = response.choices[0].message.content.strip()
        return jsonify({"reply": reply, "language": lang})

    except Exception as e:
        print("[Server Error]", e)
        return jsonify({"error": str(e)}), 500


# === KEEP-ALIVE, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª ===
def keep_alive():
    while True:
        try:
            requests.get("https://gmail-ai-stub.onrender.com", timeout=10)
            print("[KeepAlive] Ping OK")
        except Exception as e:
            print("[KeepAlive] Error:", e)
        time.sleep(240)  # –∫–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã


if __name__ == "__main__":
    threading.Thread(target=keep_alive, daemon=True).start()
    app.run(host="0.0.0.0", port=10000)
